#!/usr/bin/env python

import logging, sys, optparse, gzip
from collections import defaultdict
from os.path import join, basename, dirname, isfile

import csv
import os
import scipy.io
 
# ==== functions =====
    
def convert10XtoTab(human_matrix_dir, matrixFname):
    #genome = "hg19"
    #matrices_dir = "/opt/sample345/outs/filtered_gene_bc_matrices"
    #human_matrix_dir = os.path.join(matrices_dir, genome)

    # copied from https://support.10xgenomics.com/single-cell/software/pipelines/latest/output/matrices 
    matFname = os.path.join(human_matrix_dir, "matrix.mtx")
    logging.info("Reading %s" % matFname)
    mat = scipy.io.mmread(matFname)
     
    genes_path = os.path.join(human_matrix_dir, "genes.tsv")
    logging.info("Reading %s" % genes_path)
    gene_ids = [row[0] for row in csv.reader(open(genes_path), delimiter="\t")]
    gene_names = [row[1] for row in csv.reader(open(genes_path), delimiter="\t")]
     
    barcodes_path = os.path.join(human_matrix_dir, "barcodes.tsv")
    logging.info("Reading %s" % barcodes_path)
    barcodes = [row[0] for row in csv.reader(open(barcodes_path), delimiter="\t")]

    # END OF 10X sample code

    mat = mat.todense()

    if matrixFname.endswith(".gz"):
        ofh = gzip.open(matrixFname, "w")
    else:
        ofh = open(matrixFname, "w")

    logging.info("Writing %s" % ofh.name)
    barcodeStr = "\t".join(barcodes)
    ofh.write("GeneId\t%s\n" % barcodeStr)

    rows, cols = mat.shape
    assert(len(gene_ids)==rows)
    assert(len(barcodes)==cols)

    for i in range(0, rows):
        if i % 2000 == 0 and i!=0:
            logging.info("Wrote %d lines" % i)
        geneId = gene_ids[i]
        row = mat[i,:]
        row = row.tolist()[0]
        row = [str(x) for x in row]
        ofh.write("%s\t" % geneId)
        ofh.write("\t".join(row))
        ofh.write("\n")
    ofh.close()

    logging.info("Wrote %d lines in total" % i)
    logging.info("Wrote %s" % matrixFname)

def parseArgs():
    " setup logging, parse command line arguments and options. -h shows auto-generated help page "
    parser = optparse.OptionParser("usage: %prog [options] inDir outFname - convert 10X matrix to a normal tab-sep file")

    parser.add_option("-d", "--debug", dest="debug", action="store_true", help="show debug messages")
    #parser.add_option("-f", "--file", dest="file", action="store", help="run on file") 
    #parser.add_option("", "--test", dest="test", action="store_true", help="do something") 
    (options, args) = parser.parse_args()

    if args==[]:
        parser.print_help()
        exit(1)

    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    return args, options
# ----------- main --------------
def main():
    args, options = parseArgs()

    inDir, outFname = args
    convert10XtoTab(inDir, outFname)
    #if options.test:
        #logging.debug("test is set")
        #f = open(options.file, "r")

main()
