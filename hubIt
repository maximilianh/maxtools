#!/usr/bin/env python

import logging, sys, optparse, os
from collections import defaultdict
from os.path import join, basename, dirname, isfile, relpath, abspath

# ==== functions =====
    
def parseArgs():
    " setup logging, parse command line arguments and options. -h shows auto-generated help page "
    parser = optparse.OptionParser("usage: %prog [options] db inDir trackDbPath - create a track hub for all .bw files in a given directory. Creates only trackDb.txt, but can also add hub.txt and genomes.txt.")

    parser.add_option("-d", "--debug", dest="debug", action="store_true", help="show debug messages")
    parser.add_option("", "--hub", dest="hub", action="store_true", help="also make templates for the hub.txt and genomes.txt file.")
    parser.add_option("-m", "--meta", dest="meta", action="store", help="a table with one row per file name (no extension needed) and at least one column that specifies the short label")
    parser.add_option("-p", "--parent", dest="parent", action="store", help="make all tracks children of the specified parent track")
    #parser.add_option("-f", "--file", dest="file", action="store", help="run on file")
    #parser.add_option("", "--test", dest="test", action="store_true", help="do something")
    (options, args) = parser.parse_args()

    if args==[]:
        parser.print_help()
        exit(1)

    if options.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)
    return args, options

def parseMeta(fname):
    " parse a tab-sep file with headers and return a dict firstField -> dictionary "
    headers = None
    ret = {}
    for line in open(fname):
        fs = line.rstrip("\r\n").split("\t")
        if headers is None:
            assert(line.startswith("#"))
            headers = fs
            continue

        assert(len(fs)==len(headers))
        key = fs[0]
        row = {k:v for k,v in zip(headers, fs)}
        ret[key] = row
    return ret

def makeHubGenome(dirName, db):
    " create a hub.txt and genomes.txt file, hub.txt is just a template "
    hubFname = join(dirName, "hub.txt")
    ofh = open(hubFname, "w")
    print "Writing %s" % hubFname
    ofh.write("hub Auto-generated hub\n")
    ofh.write("shortLabel Auto-generated short label\n")
    ofh.write("longLabel Auto-generated long description\n")
    ofh.write("genomesFile genomes.txt\n")
    ofh.write("#descriptionUrl <yourDescUrlHere>\n")
    ofh.write("email yourEmail@domain.com\n")
    ofh.close()

    genomeFname = join(dirName, "genomes.txt")
    print "Writing %s" % genomeFname
    ofh = open(genomeFname, "w")
    ofh.write("genome %s\n" % db)
    ofh.write("trackDb trackDb.txt\n")
    ofh.close()

def dirToTrackHub(db, inDir, trackDbPath, options):
    """ get all .bw files under dirName and create a trackDb.txt for them"""
    if options.hub:
        makeHubGenome(dirname(trackDbPath), db)

    meta = None
    if options.meta:
        meta = parseMeta(options.meta)

    #trackDbPath = join(inDir, "trackDb.txt")
    print("Writing %s" % trackDbPath)
    ofh = open(trackDbPath, "w")

    #for rootDir, dirs, fnames in os.walk(dirName):
    #for fname in fnames:
    tdbDir = abspath(dirname(trackDbPath))
    print tdbDir
    for fname in os.listdir(inDir):
        if not fname.endswith(".bw"):
            continue
        #relPath = join(rootDir, fname)
        absPath = abspath(join(inDir, fname))
        relPath = relpath(absPath, tdbDir)

        track = fname.split(".")[0]
        fileExt = fname.split(".")[-1]

        trackMeta = {}
        if meta is not None and track in meta:
            trackMeta = meta[track]

        shortLabel = trackMeta.get("shortLabel", track)
        longLabel = trackMeta.get("longLabel", track)
        visibility = trackMeta.get("visibility", "hide")

        if fileExt=="bw" or fileExt.lower()=="bigwig":
            autoType = "bigWig"
        elif fileExt=="bb" or fileExt.lower()=="bigBed":
            autoType = "bigBed"
        elif fileExt.lower()=="bam":
            autoType = "bam"
        else:
            assert(False)

        trackType = trackMeta.get("type", autoType)

        ofh.write("track %s\n" % track)
        ofh.write("shortLabel %s\n" % shortLabel)
        ofh.write("longLabel %s\n" % longLabel)
        ofh.write("type %s\n" % trackType)
        ofh.write("bigDataUrl %s\n" % relPath)
        ofh.write("visibility %s\n" % visibility)
        if options.parent:
            ofh.write("parent %s\n" % options.parent)
        ofh.write("\n")

# ----------- main --------------
def main():
    args, options = parseArgs()

    db, dirName, trackDbPath = args

    dirToTrackHub(db, dirName, trackDbPath, options)

    #if options.test:
        #logging.debug("test is set")
        #f = open(options.file, "r")

main()
